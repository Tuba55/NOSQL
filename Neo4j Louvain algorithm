create database in neo4j and start it
 broweser:
http://localhost:7474

pip install neo4j
pip install graphdatascience


code :

from neo4j import GraphDatabase

# Establishing a connection to Neo4j

uri = "neo4j://localhost:7687"  # Update with your Neo4j instance details

username = "neo4j"

password = "password"


driver = GraphDatabase.driver(uri, auth=(username, password))


# Define the Cypher queries to run the Louvain algorithm

project_query = """

CALL gds.graph.project(

    'myGraph',

    'Node',

    'RELATION'

)

YIELD graphName;

"""

louvain_query = """

CALL gds.louvain.stream('myGraph')

YIELD nodeId, communityId, intermediateCommunityIds

RETURN gds.util.asNode(nodeId).name AS name, communityId

ORDER BY communityId;

"""


def run_louvain_algorithm(driver, project_query, louvain_query):

    with driver.session() as session:

        # First, project the graph

        session.run(project_query)

       

        # Then, run the Louvain algorithm

        result = session.run(louvain_query)

        return list(result)  # Convert result to a list


# Run the Louvain algorithm

result = run_louvain_algorithm(driver, project_query, louvain_query)


# Print the result

for record in result:

    print(f"Node: {record['name']}, Community ID: {record['communityId']}")


# Close the Neo4j connection

driver.close()

***Cypher:***

a)

CREATE (a:Node {name: 'Node A'})

CREATE (b:Node {name: 'Node B'})

CREATE (c:Node {name: 'Node C'})

CREATE (a)-[:RELATION]->(b)

CREATE (b)-[:RELATION]->(c)

CREATE (c)-[:RELATION]->(a)

b)
MATCH (n:Node) RETURN n
c)
CALL gds.graph.drop('myGraph')
d)(optional)
CALL gds.version()
